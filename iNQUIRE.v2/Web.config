<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  http://go.microsoft.com/fwlink/?LinkId=301880
  -->
<configuration>
  <configSections>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    <section name="resizer" type="ImageResizer.ResizerSection" requirePermission="false" />
    <section name="glimpse" type="Glimpse.Core.Configuration.Section, Glimpse.Core" />
    <!--<section name="uri" type="System.Configuration.UriSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />-->
    <sectionGroup name="dotNetOpenAuth" type="DotNetOpenAuth.Configuration.DotNetOpenAuthSection, DotNetOpenAuth.Core">
      <section name="messaging" type="DotNetOpenAuth.Configuration.MessagingElement, DotNetOpenAuth.Core" requirePermission="false" allowLocation="true" />
      <section name="reporting" type="DotNetOpenAuth.Configuration.ReportingElement, DotNetOpenAuth.Core" requirePermission="false" allowLocation="true" />
      <section name="oauth" type="DotNetOpenAuth.Configuration.OAuthElement, DotNetOpenAuth.OAuth" requirePermission="false" allowLocation="true" />
      <section name="openid" type="DotNetOpenAuth.Configuration.OpenIdElement, DotNetOpenAuth.OpenId" requirePermission="false" allowLocation="true" />
    </sectionGroup>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Unity.Configuration" />
    <!--<section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" />-->
  </configSections>

  <unity configSource="Unity.config" />

  <connectionStrings configSource="ConnectionStrings.config" />
  <appSettings file="AppSettingsSecrets.config">
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="false" />
    <add key="ClientValidationEnabled" value="true" />
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />

    <!-- IMPORTANT: DO NOT PUT YOUR SENSITIVE DATA IN HERE!
          These elements are included to show the list of available parameters
          Place your actual values in AppSettingsSecrets.config instead,
          see see http://www.asp.net/identity/overview/features-api/best-practices-for-deploying-passwords-and-other-sensitive-data-to-aspnet-and-azure
          for more info.
          -->
    <!-- Start: Sensitive Data, use AppSettingsSecrets.config for your real settings -->
    <!-- End: Sensitive Data -->

    <!-- Advanced configuration settings, plus some deprecated settings
          Not normally needed, only edit if you know what you are doing-->
    <add key="XmlDataFile" value="jpeg2000s.xml" />
    <!-- jpeg2000s.xml theodore_psalter.xml -->
    <!-- IIP Image server (Windows?) bug: requesting default.jpg returns an error: quality can only be numeric or certain values, doesn't accept "default" even though it should do under the iiif spec
        so "default" will be replaced with this value instead -->
    <add key="IIIFDefaultQuality" value="5" />
    <!-- JPEG2000 Image Server Settings -->
    <!-- Jpeg2000Namespace and Jpeg2000NameSpaceReplace were added in case of migration from Djatoka to IIP Image server, and lets you map:
          "[Jpeg2000NameSpaceReplace]/filename" to "[Jpeg2000Namespace]/filename[ImageFilenameAppend]"
        These parameters can just be left blank, along with ImageFilenameAppend if not required.
        Jpeg2000Namespace also has a function in that if you have a mix of JP2 and non JP2 images, then having the value of
        Jpeg2000Namespace somewhere in the file path will allow inquire to distinguish JP2 images from non JP2 images.
        For example in our test site all our JP2 images are in a directory "crimea/", so setting Jpeg2000Namespace to "crimea/" allows us to know to treat all these images as JP2s.
        You could equally set Jpeg2000Namespace to ".jp2" if you have no common JP2 root directory, and of course as long as ".jp2" is present in your file paths (even if appended above via ImageFilenameAppend).
        If all your images are JP2s then you should be able to leave this field blank, inquire will treat all images as JP2s. -->
    <!-- Put your server settings in the AppSettingsSecrets.config file
    iNQUIRE handles DeepZoom/OpenSeadragon images calls and make the requests
    from the iNQUIRE server to the image server, thus hiding it from direct calls
    or allowing intranet based image servers to be used
    (the iNQUIRE server acts as a reverse proxy) -->
    <!-- Use thes settings with IIP Image Server -->
    <!--<add key="ResolverUri" value="http://62.49.109.149/iipsrv.fcgi" />
    <add key="ViewerUri" value="http://62.49.109.149/iipsrv.fcgi" />
    <add key="ProxyResolverFile" value="resolver.iip" />    
    <add key="Jpeg2000NamespaceReplace" value="info:arm/test/" />
    <add key="Jpeg2000Namespace" value="Images/RKD/" />
    <add key="ImageFilenameAppend" value=".jp2" />
    <add key="DeepZoomQueryParameter" value="DeepZoom" />-->
    <!-- End: Use thes settings with IIP Image Server -->
    <!-- Djatoka image server development seems dead, so these settings
  and Djatoka support will most likely be removed-->
    <!-- Use these settings with Djatoka -->
    <!--<add key="ResolverUri" value="http://62.49.109.149:8080/adore-djatoka/resolver" />
    <add key="ViewerUri" value="http://62.49.109.149:8080/djatoka-viewer/viewer.html" />
    <add key="ProxyResolverFile" value="resolver.dja" />
    <add key="Jpeg2000NamespaceReplace" value="" />
    <add key="Jpeg2000Namespace" value="info:arm/test/" />
    <add key="ImageFilenameAppend" value="" />
    <add key="DeepZoomQueryParameter" value="rft_id" />-->
    <!-- End: Use these settings with Djatoka -->
    <add key="DjatokaHome" value="F:\Clients\iNQUiRE\inquire_working\iNQUIRE\iNQUIRE\djatoka" />
    <!-- required if using Djatoka and require jpeg2000s to be created on the fly from non-jpeg2000 original source images -->
    <add key="DeepZoomViewerFile" value="viewer.dzi" />
    <!-- don't remove the word "viewer", wil cause code to break? -->
    <!-- end: JPEG2000 Image Server Settings -->

    <!-- start: machine specific settings -->
    <!--
    <add key="Jpeg2000Directory" value="G:\jp2\test2\" />
    <add key="ImageDirectory" value="G:\ASPSites\inquire\1.1\Media\images\" />
    <add key="LogFileDirectory" value="G:\ASPSites\inquire\1.1\" />
    <add key="DjatokaHome" value="G:\djatoka\adore-djatoka-1.1" />
    <add key="JavaHome" value="C:\Program Files\Java\jdk1.6.0_22\bin\java.exe" />
    -->
    <!-- end: machine specific settings -->

    <!-- The directory to store cached version of images. Relative to the application root.
    If you want the cache outside the application, use a
    Virtual Folder in IIS to point the physical location elsewhere. -->
    <add key="ImageDiskCacheDir" value="imagecache" />
    <!-- How many files to keep in the cache. The 10% least recently used files
    will be deleted when this limit is reached. Don't set this lower than the
    number of images on your site. 2x the image count is a good default.
    If you are getting "Access Denied" messages, this is the cuplrit - you need to
    increase it -->
    <add key="MaxCachedImages" value="30000" />
    <!-- The following settings are optional: -->
    <!-- The maximum size to permit images to be resized to. -->
    <add key="ImageResizerMaxWidth" value="1680" />
    <add key="ImageResizerMaxHeight" value="1680" />
    <!-- Takes effect in version 1.2+. The default (for all versions)
    is 1440 minutes (24 hours). Set to 0 to disable *client* caching
    (304 "Not Modified" responses will still be returned if nothing has changed).
    Client caching is not related to disk caching. -->
    <add key="ImageResizerClientCacheMinutes" value="1440" />
    <!-- This enables /resize(x,y,f)/image.jpg notation in v1.2+. Enabling this
    will make URL authorization ineffective on image files.
    Changed to AllowURLRewriting in 2.0-->
    <add key="AllowFolderResizeNotation" value="true" />
    <!-- This enables /resize(x,y,f)/image.jpg notation and other CustomFolders.cs
    rewriting (other than querystring-only changes) in v2.0. Enabling this
    will make URL authorization ineffective on image files on versions prior to 2.1b.-->
    <add key="AllowURLRewriting" value="true" />
    <!-- Enable only for debugging! (v2.0a+ only)
    Prevents use of cached files - Required for seeing results
    when changing the resizing algorithms.
    Causes terrible performance - don't leave enabled.-->
    <add key="DiskCacheAlwaysInvalid" value="false" />
    <!-- (v2.0b+ only) Prevents the cache cleanup routine from running. If you want to
    manually purge the image cache yourself, and aren't worried about running out
    of disk space via a DOS attack, you can disable this. Not advised. -->
    <add key="DisableCacheCleanup" value="false" />
    <!-- (v2.1+ only) Disabling custom quantization allows the resizer to function in low trust
    environments where managed pointer access and data type marshaling is prohibited.
    However, PNGs and BMPs can only be output in 32-bit mode, and GIFs will use the default
    halftone pallete. Enable this if JPGs and PNGs work, but GIFs don't, and using colors=255
    on PNGs causes them to break also.
    Causes much lower quality GIFs to be generated.
    Version 2.1+.
    -->
    <add key="DisableCustomQuantization" value="false" />
    <!-- (v2.1b+ only) This allows images to be resized without any
    IIS configuration whatsoever (AllowURLRewriting must be true, however).
    Just set this value to ".axd", ".ashx", ".aspx", or any extension
    already registered in IIS, and add the same extension to your image URLs
    when you are resizing them. Doesn't conflict with other pages/files with
    that extension, unless you name them .jpeg.ashx., etc.
    When configured properly in IIS, any extension should work, but ".ashx"
    seems to be configured right on the largest number of servers.

    Ex. /images/media/flower.jpg -> /images/media/flower.jpg.axd?width=x&height=y
    -->
    <add key="ResizeExtension" value=".ashx" />
    <!-- v2.6+ Disables the additional URL authorization checks
    performed by the resizer after URL rewriting. -->
    <add key="DisableImageURLAuthorization" value="false" />
    <!-- v2.2+ Enables use of registired VirtualPathProviders.
    Inherently stops modified date checking.
    (i.e, cached files are never updated, unless the VirtualFile
    implements IVirtualFileWithModifiedDatae). -->
    <add key="ImageResizerUseVirtualPathProvider" value="false" />
    <!-- v2.5+ Only executes the virtual path provider if the physical file doesn't exist -->
    <add key="ImageResizerUseVirtualPathProviderAsFallback" value="false" />
    <!-- v2.3+ When set to a non-empty value, divides the cache into the
    specified number of subfolders. MUST be a power of two, or it will get
    rounded up to the next power of two, which might be VERY different from
    the configured value. Values above 8096 are not suggested for best NTFS performance.
    Suggested value is (MaxCachedImages / 7500).  Remember to delete the imagecache
    folder every time you change this value - otherwise lots of orphaned files will be there.
    -->
    <add key="ImageCacheSubfolders" value="8" />
  </appSettings>
  <!--
    For a description of web.config changes see http://go.microsoft.com/fwlink/?LinkId=235367.

    The following attributes can be set on the <httpRuntime> tag.
      <system.Web>
        <httpRuntime targetFramework="4.5.2" />
      </system.Web>
  -->
  <system.web>
    <customErrors mode="Off" />
    <authentication mode="None" />
    <compilation debug="true" targetFramework="4.6.2" />
    <httpRuntime targetFramework="4.5" requestPathInvalidCharacters="&lt;,&gt;,*,%,&amp;,\,?" />
    <!-- Glimpse: This can be commented in to add additional data to the Trace tab when using WebForms
        <trace writeToDiagnosticsTrace="true" enabled="true" pageOutput="false"/> -->
    <httpModules>
      <!--<add name="ImageResizer" type="fbs.ImageResizer.InterceptModule" />-->
      <!--<add name="Glimpse" type="Glimpse.Core.Module" />-->
      <add name="ImageResizingModule" type="ImageResizer.InterceptModule" />
      <add name="Glimpse" type="Glimpse.AspNet.HttpModule, Glimpse.AspNet" />
    </httpModules>
    <!-- <authentication mode="Forms">
      <forms loginUrl="~/Account/LogOn" timeout="2880" />
    </authentication>
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="15">
      <providers>
        <add name="SqlProvider" type="System.Web.Security.SqlMembershipProvider" connectionStringName="SqlServices" applicationName="iNQUIRE" enablePasswordRetrieval="false" enablePasswordReset="true" requiresQuestionAndAnswer="false" requiresUniqueEmail="true" passwordFormat="Hashed" maxInvalidPasswordAttempts="5" passwordAttemptWindow="10" minRequiredPasswordLength="3" minRequiredNonalphanumericCharacters="0" />
      </providers>
    </membership> -->
    <httpHandlers>
      <add path="glimpse.axd" verb="GET" type="Glimpse.AspNet.HttpHandler, Glimpse.AspNet" />
    </httpHandlers>
  </system.web>
  <system.webServer>
	<httpProtocol>
	  <customHeaders>
		  <add name="Access-Control-Allow-Origin" value="*" />
		  <add name="Access-Control-Allow-Methods" value="GET,POST,OPTIONS" />
		  <add name="Access-Control-Allow-Headers" value="Content-Type, soapaction" />
	  </customHeaders>
	</httpProtocol>
    <validation validateIntegratedModeConfiguration="false" />
    <modules runAllManagedModulesForAllRequests="true">
      <remove name="WebDAVModule" />
      <remove name="FormsAuthentication" />
      <!--<add name="ImageResizer" type="fbs.ImageResizer.InterceptModule" />
      <add name="Glimpse" type="Glimpse.Core.Module,Glimpse.Core" preCondition="integratedMode" />-->
      <add name="ImageResizingModule" type="ImageResizer.InterceptModule" />
      <add name="Glimpse" type="Glimpse.AspNet.HttpModule, Glimpse.AspNet" preCondition="integratedMode" />
    </modules>
    <handlers>
      <!-- don't forget to set an ignore rule in RegisterRoutes else call will be intercepted by asp.net -->
      <!--<add name="DjatokaHandler" path="*.dja" verb="*" type="DjatokaIIS.DjatokaHandler" resourceType="Unspecified" preCondition="integratedMode" />
      <add name="DeepZoomHandler" path="*.dzi" verb="*" type="DjatokaIIS.DeepZoomHandler" resourceType="Unspecified" preCondition="integratedMode" />-->
      <add name="IIPImageHandler" path="*.iip" verb="*" type="IIPImageIIS.IIPImageHandler" resourceType="Unspecified" preCondition="integratedMode" />
      <add name="DeepZoomHandlerIIP" path="*.dzi" verb="*" type="IIPImageIIS.DeepZoomHandlerIIP" resourceType="Unspecified" preCondition="integratedMode" />
      <add name="IIIFHandler" path="iiif" verb="*" type="IIIFIIS.IIIFHandler" resourceType="Unspecified" preCondition="integratedMode" />
      <add name="Glimpse" path="glimpse.axd" verb="GET" type="Glimpse.AspNet.HttpHandler, Glimpse.AspNet" preCondition="integratedMode" />
      <remove name="WebDAV" />
      <remove name="ExtensionlessUrlHandler-Integrated-4.0" />
      <remove name="OPTIONSVerbHandler" />
      <remove name="TRACEVerbHandler" />
      <add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="*" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" />
    </handlers>
    <staticContent>
      <remove fileExtension=".mp4" />
      <mimeMap fileExtension=".mp4" mimeType="video/mp4" />
      <remove fileExtension=".m4v" />
      <mimeMap fileExtension=".m4v" mimeType="video/m4v" />
      <remove fileExtension=".ogg" />
      <mimeMap fileExtension=".ogg" mimeType="video/ogg" />
      <remove fileExtension=".ogv" />
      <mimeMap fileExtension=".ogv" mimeType="video/ogg" />
      <remove fileExtension=".webm" />
      <mimeMap fileExtension=".webm" mimeType="video/webm" />
      <remove fileExtension=".oga" />
      <mimeMap fileExtension=".oga" mimeType="audio/ogg" />
      <remove fileExtension=".spx" />
      <mimeMap fileExtension=".spx" mimeType="audio/ogg" />
      <remove fileExtension=".svg" />
      <mimeMap fileExtension=".svg" mimeType="image/svg+xml" />
      <remove fileExtension=".svgz" />
      <mimeMap fileExtension=".svgz" mimeType="image/svg+xml" />
      <remove fileExtension=".eot" />
      <mimeMap fileExtension=".eot" mimeType="application/vnd.ms-fontobject" />
      <remove fileExtension=".otf" />
      <mimeMap fileExtension=".otf" mimeType="font/otf" />
      <remove fileExtension=".woff" />
      <mimeMap fileExtension=".woff" mimeType="font/x-woff" />
    </staticContent>
    <rewrite>
      <rules>
        <rule name="HTTPS Rule behind AWS Elastic Load Balancer Rule" stopProcessing="true">
          <match url="^(.*)$" ignoreCase="false" />
          <conditions>
            <add input="{HTTP_X_FORWARDED_PROTO}" pattern="^http$" ignoreCase="false" />
          </conditions>
          <action type="Redirect" url="https://{SERVER_NAME}{URL}" redirectType="Found" />
        </rule>
      </rules>
    </rewrite>
  </system.webServer>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Owin.Security.OAuth" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Owin.Security.Cookies" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Owin.Security" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" culture="neutral" publicKeyToken="30ad4fe6b2a6aeed" />
        <bindingRedirect oldVersion="0.0.0.0-10.0.0.0" newVersion="10.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Optimization" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-1.1.0.0" newVersion="1.1.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="WebGrease" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-1.5.2.14234" newVersion="1.5.2.14234" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Ninject" publicKeyToken="c7192dc5380945e7" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.2.0.0" newVersion="2.2.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="SolrNet" publicKeyToken="bc21753e8aa334cb" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-0.4.0.2002" newVersion="0.4.0.2002" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages.Razor" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <bindingRedirect oldVersion="0.0.0.0-5.2.3.0" newVersion="5.2.3.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Owin" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="WebMatrix.Data" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Net.Http" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.1.3" newVersion="4.1.1.3" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-5.2.7.0" newVersion="5.2.7.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="CommonServiceLocator" publicKeyToken="489b6accfaf20ef0" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.0.2.0" newVersion="2.0.2.0" />
      </dependentAssembly>
    </assemblyBinding>
    <!-- When targeting ASP.NET MVC 3, this assemblyBinding makes MVC 1 and 2 references relink
         to MVC 3 so libraries such as DotNetOpenAuth that compile against MVC 1 will work with it.
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
     -->
    <!-- This prevents the Windows Event Log from frequently logging that HMAC1 is being used (when the other party needs it). -->
    <legacyHMACWarning enabled="0" />
    <!-- When targeting ASP.NET MVC 3, this assemblyBinding makes MVC 1 and 2 references relink
         to MVC 3 so libraries such as DotNetOpenAuth that compile against MVC 1 will work with it.
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
     -->
  </runtime>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="mssqllocaldb" />
      </parameters>
    </defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
  <!--<uri>
     The uri section is necessary to turn on .NET 3.5 support for IDN (international domain names),
         which is necessary for OpenID urls with unicode characters in the domain/host name.
         It is also required to put the Uri class into RFC 3986 escaping mode, which OpenID and OAuth require. 
     The uri section is necessary to turn on .NET 3.5 support for IDN (international domain names),
       which is necessary for OpenID urls with unicode characters in the domain/host name. 
       It is also required to put the Uri class into RFC 3986 escaping mode, which OpenID and OAuth require.
    <idn enabled="All" />
    <iriParsing enabled="true" />
  </uri>-->
  <resizer>
    <plugins>
      <add name="DiskCache" />
    </plugins>
  </resizer>
  <glimpse defaultRuntimePolicy="On" endpointBaseUri="~/Glimpse.axd">
    <!-- 
          For more information on how to configure Glimpse, please visit http://getglimpse.com/Help/Configuration
          or access {your site}/Glimpse.axd for even more details and a Configuration Tool to support you. 
      -->
  </glimpse>
  <system.net>
    <defaultProxy enabled="true" />
    <settings>
      <!-- This setting causes .NET to check certificate revocation lists (CRL) 
           before trusting HTTPS certificates.  But this setting tends to not 
           be allowed in shared hosting environments. -->
      <!--<servicePointManager checkCertificateRevocationList="true"/>-->
    </settings>
  </system.net>
  <dotNetOpenAuth>
    <messaging>
      <untrustedWebRequest>
        <whitelistHosts>
          <!-- Uncomment to enable communication with localhost (should generally not activate in production!) -->
          <!--<add name="localhost" />-->
        </whitelistHosts>
      </untrustedWebRequest>
    </messaging>
    <!-- Allow DotNetOpenAuth to publish usage statistics to library authors to improve the library. -->
    <reporting enabled="true" />
    <!-- This is an optional configuration section where aspects of dotnetopenauth can be customized. -->
    <!-- For a complete set of configuration options see http://www.dotnetopenauth.net/developers/code-snippets/configuration-options/ -->
    <openid>
      <provider />
      <relyingParty>
        <security requireSsl="false">
          <!-- Uncomment the trustedProviders tag if your relying party should only accept positive assertions from a closed set of OpenID Providers. -->
          <!--<trustedProviders rejectAssertionsFromUntrustedProviders="true">
            <add endpoint="https://www.google.com/accounts/o8/ud" />
          </trustedProviders>-->
        </security>
        <behaviors>
          <!-- The following OPTIONAL behavior allows RPs to use SREG only, but be compatible
               with OPs that use Attribute Exchange (in various formats). -->
          <add type="DotNetOpenAuth.OpenId.RelyingParty.Behaviors.AXFetchAsSregTransform, DotNetOpenAuth.OpenId.RelyingParty" />
        </behaviors>
      </relyingParty>
    </openid>
  </dotNetOpenAuth>
  <uri>
    <!-- The uri section is necessary to turn on .NET 3.5 support for IDN (international domain names),
         which is necessary for OpenID urls with unicode characters in the domain/host name.
         It is also required to put the Uri class into RFC 3986 escaping mode, which OpenID and OAuth require. -->
    <idn enabled="All" />
    <iriParsing enabled="true" />
  </uri>
</configuration>
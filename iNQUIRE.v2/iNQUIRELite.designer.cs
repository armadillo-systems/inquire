#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iNQUIRE
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="INQUIRE_Lite")]
	public partial class iNQUIRELiteDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWorkspace(Workspace instance);
    partial void UpdateWorkspace(Workspace instance);
    partial void DeleteWorkspace(Workspace instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertWorkspaceItem(WorkspaceItem instance);
    partial void UpdateWorkspaceItem(WorkspaceItem instance);
    partial void DeleteWorkspaceItem(WorkspaceItem instance);
    partial void InsertTaggedItem(TaggedItem instance);
    partial void UpdateTaggedItem(TaggedItem instance);
    partial void DeleteTaggedItem(TaggedItem instance);
    partial void InsertNote(Note instance);
    partial void UpdateNote(Note instance);
    partial void DeleteNote(Note instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertSearch(Search instance);
    partial void UpdateSearch(Search instance);
    partial void DeleteSearch(Search instance);
    #endregion
		
		public iNQUIRELiteDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["INQUIREConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public iNQUIRELiteDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public iNQUIRELiteDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public iNQUIRELiteDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public iNQUIRELiteDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Workspace> Workspaces
		{
			get
			{
				return this.GetTable<Workspace>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<WorkspaceItem> WorkspaceItems
		{
			get
			{
				return this.GetTable<WorkspaceItem>();
			}
		}
		
		public System.Data.Linq.Table<TaggedItem> TaggedItems
		{
			get
			{
				return this.GetTable<TaggedItem>();
			}
		}
		
		public System.Data.Linq.Table<Note> Notes
		{
			get
			{
				return this.GetTable<Note>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<Search> Searches
		{
			get
			{
				return this.GetTable<Search>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Workspaces")]
	public partial class Workspace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _WorkspaceID;
		
		private string _UserID;
		
		private string _Title;
		
		private System.Nullable<System.DateTime> _LastEdited;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Guid _ApplicationID;
		
		private EntitySet<WorkspaceItem> _WorkspaceItems;
		
		private EntityRef<Note> _Note;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkspaceIDChanging(System.Guid value);
    partial void OnWorkspaceIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLastEditedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastEditedChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnApplicationIDChanging(System.Guid value);
    partial void OnApplicationIDChanged();
    #endregion
		
		public Workspace()
		{
			this._WorkspaceItems = new EntitySet<WorkspaceItem>(new Action<WorkspaceItem>(this.attach_WorkspaceItems), new Action<WorkspaceItem>(this.detach_WorkspaceItems));
			this._Note = default(EntityRef<Note>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkspaceID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid WorkspaceID
		{
			get
			{
				return this._WorkspaceID;
			}
			set
			{
				if ((this._WorkspaceID != value))
				{
					this.OnWorkspaceIDChanging(value);
					this.SendPropertyChanging();
					this._WorkspaceID = value;
					this.SendPropertyChanged("WorkspaceID");
					this.OnWorkspaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastEdited", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastEdited
		{
			get
			{
				return this._LastEdited;
			}
			set
			{
				if ((this._LastEdited != value))
				{
					this.OnLastEditedChanging(value);
					this.SendPropertyChanging();
					this._LastEdited = value;
					this.SendPropertyChanged("LastEdited");
					this.OnLastEditedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workspace_WorkspaceItem", Storage="_WorkspaceItems", ThisKey="WorkspaceID", OtherKey="WorkspaceID")]
		public EntitySet<WorkspaceItem> WorkspaceItems
		{
			get
			{
				return this._WorkspaceItems;
			}
			set
			{
				this._WorkspaceItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workspace_Note", Storage="_Note", ThisKey="WorkspaceID", OtherKey="NoteID", IsUnique=true, IsForeignKey=false)]
		public Note Note
		{
			get
			{
				return this._Note.Entity;
			}
			set
			{
				Note previousValue = this._Note.Entity;
				if (((previousValue != value) 
							|| (this._Note.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Note.Entity = null;
						previousValue.Workspace = null;
					}
					this._Note.Entity = value;
					if ((value != null))
					{
						value.Workspace = this;
					}
					this.SendPropertyChanged("Note");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Workspace", Storage="_User", ThisKey="UserID", OtherKey="Id", IsForeignKey=true)]
		internal User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Workspaces.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Workspaces.Add(this);
						this._UserID = value.Id;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkspaceItems(WorkspaceItem entity)
		{
			this.SendPropertyChanging();
			entity.Workspace = this;
		}
		
		private void detach_WorkspaceItems(WorkspaceItem entity)
		{
			this.SendPropertyChanging();
			entity.Workspace = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tags")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _TagID;
		
		private string _UserID;
		
		private string _Title;
		
		private string _LanguageID;
		
		private bool _Approved;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Guid _ApplicationID;
		
		private EntitySet<TaggedItem> _TaggedItems;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIDChanging(System.Guid value);
    partial void OnTagIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnLanguageIDChanging(string value);
    partial void OnLanguageIDChanged();
    partial void OnApprovedChanging(bool value);
    partial void OnApprovedChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnApplicationIDChanging(System.Guid value);
    partial void OnApplicationIDChanged();
    #endregion
		
		public Tag()
		{
			this._TaggedItems = new EntitySet<TaggedItem>(new Action<TaggedItem>(this.attach_TaggedItems), new Action<TaggedItem>(this.detach_TaggedItems));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="nvarchar(128) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit NOT NULL")]
		public bool Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_TaggedItem", Storage="_TaggedItems", ThisKey="TagID", OtherKey="TagID")]
		public EntitySet<TaggedItem> TaggedItems
		{
			get
			{
				return this._TaggedItems;
			}
			set
			{
				this._TaggedItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Tag", Storage="_User", ThisKey="UserID", OtherKey="Id", IsForeignKey=true)]
		internal User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tags.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tags.Add(this);
						this._UserID = value.Id;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaggedItems(TaggedItem entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_TaggedItems(TaggedItem entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ObjectsToWorkspaces")]
	public partial class WorkspaceItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ObjectWorkspaceID;
		
		private string _ObjectID;
		
		private System.Guid _WorkspaceID;
		
		private string _LanguageID;
		
		private string _Notes;
		
		private int _PosX;
		
		private int _PosY;
		
		private string _Keywords;
		
		private string _SearchTerm;
		
		private System.Nullable<System.DateTime> _LastEdited;
		
		private int _Position;
		
		private string _Title;
		
		private EntityRef<Workspace> _Workspace;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectWorkspaceIDChanging(System.Guid value);
    partial void OnObjectWorkspaceIDChanged();
    partial void OnObjectIDChanging(string value);
    partial void OnObjectIDChanged();
    partial void OnWorkspaceIDChanging(System.Guid value);
    partial void OnWorkspaceIDChanged();
    partial void OnLanguageIDChanging(string value);
    partial void OnLanguageIDChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnPosXChanging(int value);
    partial void OnPosXChanged();
    partial void OnPosYChanging(int value);
    partial void OnPosYChanged();
    partial void OnKeywordsChanging(string value);
    partial void OnKeywordsChanged();
    partial void OnSearchTermChanging(string value);
    partial void OnSearchTermChanged();
    partial void OnLastEditedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastEditedChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public WorkspaceItem()
		{
			this._Workspace = default(EntityRef<Workspace>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectWorkspaceID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ObjectWorkspaceID
		{
			get
			{
				return this._ObjectWorkspaceID;
			}
			set
			{
				if ((this._ObjectWorkspaceID != value))
				{
					this.OnObjectWorkspaceIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectWorkspaceID = value;
					this.SendPropertyChanged("ObjectWorkspaceID");
					this.OnObjectWorkspaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkspaceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid WorkspaceID
		{
			get
			{
				return this._WorkspaceID;
			}
			set
			{
				if ((this._WorkspaceID != value))
				{
					if (this._Workspace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkspaceIDChanging(value);
					this.SendPropertyChanging();
					this._WorkspaceID = value;
					this.SendPropertyChanged("WorkspaceID");
					this.OnWorkspaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(MAX)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosX", DbType="Int NOT NULL")]
		public int PosX
		{
			get
			{
				return this._PosX;
			}
			set
			{
				if ((this._PosX != value))
				{
					this.OnPosXChanging(value);
					this.SendPropertyChanging();
					this._PosX = value;
					this.SendPropertyChanged("PosX");
					this.OnPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosY", DbType="Int NOT NULL")]
		public int PosY
		{
			get
			{
				return this._PosY;
			}
			set
			{
				if ((this._PosY != value))
				{
					this.OnPosYChanging(value);
					this.SendPropertyChanging();
					this._PosY = value;
					this.SendPropertyChanged("PosY");
					this.OnPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Keywords", DbType="NVarChar(MAX)")]
		public string Keywords
		{
			get
			{
				return this._Keywords;
			}
			set
			{
				if ((this._Keywords != value))
				{
					this.OnKeywordsChanging(value);
					this.SendPropertyChanging();
					this._Keywords = value;
					this.SendPropertyChanged("Keywords");
					this.OnKeywordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SearchTerm", DbType="NVarChar(255)")]
		public string SearchTerm
		{
			get
			{
				return this._SearchTerm;
			}
			set
			{
				if ((this._SearchTerm != value))
				{
					this.OnSearchTermChanging(value);
					this.SendPropertyChanging();
					this._SearchTerm = value;
					this.SendPropertyChanged("SearchTerm");
					this.OnSearchTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastEdited", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastEdited
		{
			get
			{
				return this._LastEdited;
			}
			set
			{
				if ((this._LastEdited != value))
				{
					this.OnLastEditedChanging(value);
					this.SendPropertyChanging();
					this._LastEdited = value;
					this.SendPropertyChanged("LastEdited");
					this.OnLastEditedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(255)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workspace_WorkspaceItem", Storage="_Workspace", ThisKey="WorkspaceID", OtherKey="WorkspaceID", IsForeignKey=true)]
		internal Workspace Workspace
		{
			get
			{
				return this._Workspace.Entity;
			}
			set
			{
				Workspace previousValue = this._Workspace.Entity;
				if (((previousValue != value) 
							|| (this._Workspace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workspace.Entity = null;
						previousValue.WorkspaceItems.Remove(this);
					}
					this._Workspace.Entity = value;
					if ((value != null))
					{
						value.WorkspaceItems.Add(this);
						this._WorkspaceID = value.WorkspaceID;
					}
					else
					{
						this._WorkspaceID = default(System.Guid);
					}
					this.SendPropertyChanged("Workspace");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ObjectsToTags")]
	public partial class TaggedItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ObjectToTagID;
		
		private string _ObjectID;
		
		private System.Guid _TagID;
		
		private string _UserID;
		
		private System.Nullable<System.DateTime> _LastEdited;
		
		private string _LanguageID;
		
		private System.Guid _ApplicationID;
		
		private EntityRef<Tag> _Tag;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnObjectToTagIDChanging(System.Guid value);
    partial void OnObjectToTagIDChanged();
    partial void OnObjectIDChanging(string value);
    partial void OnObjectIDChanged();
    partial void OnTagIDChanging(System.Guid value);
    partial void OnTagIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnLastEditedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastEditedChanged();
    partial void OnLanguageIDChanging(string value);
    partial void OnLanguageIDChanged();
    partial void OnApplicationIDChanging(System.Guid value);
    partial void OnApplicationIDChanged();
    #endregion
		
		public TaggedItem()
		{
			this._Tag = default(EntityRef<Tag>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectToTagID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ObjectToTagID
		{
			get
			{
				return this._ObjectToTagID;
			}
			set
			{
				if ((this._ObjectToTagID != value))
				{
					this.OnObjectToTagIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectToTagID = value;
					this.SendPropertyChanged("ObjectToTagID");
					this.OnObjectToTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="nvarchar(128) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastEdited", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastEdited
		{
			get
			{
				return this._LastEdited;
			}
			set
			{
				if ((this._LastEdited != value))
				{
					this.OnLastEditedChanging(value);
					this.SendPropertyChanging();
					this._LastEdited = value;
					this.SendPropertyChanged("LastEdited");
					this.OnLastEditedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="NChar(3)")]
		public string LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_TaggedItem", Storage="_Tag", ThisKey="TagID", OtherKey="TagID", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.TaggedItems.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.TaggedItems.Add(this);
						this._TagID = value.TagID;
					}
					else
					{
						this._TagID = default(System.Guid);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TaggedItem", Storage="_User", ThisKey="UserID", OtherKey="Id", IsForeignKey=true)]
		internal User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TaggedItems.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TaggedItems.Add(this);
						this._UserID = value.Id;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notes")]
	public partial class Note : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _NoteID;
		
		private string _UserID;
		
		private string _LanguageID;
		
		private bool _PublicNote;
		
		private string _ParentID;
		
		private string _Text;
		
		private bool _Approved;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _LastEdited;
		
		private System.Guid _ApplicationID;
		
		private EntityRef<Workspace> _Workspace;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNoteIDChanging(System.Guid value);
    partial void OnNoteIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnLanguageIDChanging(string value);
    partial void OnLanguageIDChanged();
    partial void OnPublicNoteChanging(bool value);
    partial void OnPublicNoteChanged();
    partial void OnParentIDChanging(string value);
    partial void OnParentIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnApprovedChanging(bool value);
    partial void OnApprovedChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnLastEditedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastEditedChanged();
    partial void OnApplicationIDChanging(System.Guid value);
    partial void OnApplicationIDChanged();
    #endregion
		
		public Note()
		{
			this._Workspace = default(EntityRef<Workspace>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoteID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid NoteID
		{
			get
			{
				return this._NoteID;
			}
			set
			{
				if ((this._NoteID != value))
				{
					if (this._Workspace.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNoteIDChanging(value);
					this.SendPropertyChanging();
					this._NoteID = value;
					this.SendPropertyChanged("NoteID");
					this.OnNoteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="nvarchar(128) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageID", DbType="NChar(3) NOT NULL", CanBeNull=false)]
		public string LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PublicNote", DbType="Bit NOT NULL")]
		public bool PublicNote
		{
			get
			{
				return this._PublicNote;
			}
			set
			{
				if ((this._PublicNote != value))
				{
					this.OnPublicNoteChanging(value);
					this.SendPropertyChanging();
					this._PublicNote = value;
					this.SendPropertyChanged("PublicNote");
					this.OnPublicNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX)")]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Approved", DbType="Bit NOT NULL")]
		public bool Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastEdited", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastEdited
		{
			get
			{
				return this._LastEdited;
			}
			set
			{
				if ((this._LastEdited != value))
				{
					this.OnLastEditedChanging(value);
					this.SendPropertyChanging();
					this._LastEdited = value;
					this.SendPropertyChanged("LastEdited");
					this.OnLastEditedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Workspace_Note", Storage="_Workspace", ThisKey="NoteID", OtherKey="WorkspaceID", IsForeignKey=true)]
		internal Workspace Workspace
		{
			get
			{
				return this._Workspace.Entity;
			}
			set
			{
				Workspace previousValue = this._Workspace.Entity;
				if (((previousValue != value) 
							|| (this._Workspace.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Workspace.Entity = null;
						previousValue.Note = null;
					}
					this._Workspace.Entity = value;
					if ((value != null))
					{
						value.Note = this;
						this._NoteID = value.WorkspaceID;
					}
					else
					{
						this._NoteID = default(System.Guid);
					}
					this.SendPropertyChanged("Workspace");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Note", Storage="_User", ThisKey="UserID", OtherKey="Id", IsForeignKey=true)]
		internal User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Notes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Notes.Add(this);
						this._UserID = value.Id;
					}
					else
					{
						this._UserID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _UserName;
		
		private EntitySet<Workspace> _Workspaces;
		
		private EntitySet<Tag> _Tags;
		
		private EntitySet<TaggedItem> _TaggedItems;
		
		private EntitySet<Note> _Notes;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntitySet<Search> _Searches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public User()
		{
			this._Workspaces = new EntitySet<Workspace>(new Action<Workspace>(this.attach_Workspaces), new Action<Workspace>(this.detach_Workspaces));
			this._Tags = new EntitySet<Tag>(new Action<Tag>(this.attach_Tags), new Action<Tag>(this.detach_Tags));
			this._TaggedItems = new EntitySet<TaggedItem>(new Action<TaggedItem>(this.attach_TaggedItems), new Action<TaggedItem>(this.detach_TaggedItems));
			this._Notes = new EntitySet<Note>(new Action<Note>(this.attach_Notes), new Action<Note>(this.detach_Notes));
			this._UserProfile = default(EntityRef<UserProfile>);
			this._Searches = new EntitySet<Search>(new Action<Search>(this.attach_Searches), new Action<Search>(this.detach_Searches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Workspace", Storage="_Workspaces", ThisKey="Id", OtherKey="UserID")]
		public EntitySet<Workspace> Workspaces
		{
			get
			{
				return this._Workspaces;
			}
			set
			{
				this._Workspaces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Tag", Storage="_Tags", ThisKey="Id", OtherKey="UserID")]
		public EntitySet<Tag> Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				this._Tags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TaggedItem", Storage="_TaggedItems", ThisKey="Id", OtherKey="UserID")]
		public EntitySet<TaggedItem> TaggedItems
		{
			get
			{
				return this._TaggedItems;
			}
			set
			{
				this._TaggedItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Note", Storage="_Notes", ThisKey="Id", OtherKey="UserID")]
		public EntitySet<Note> Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				this._Notes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProfile", Storage="_UserProfile", ThisKey="Id", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.User = null;
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Search", Storage="_Searches", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Search> Searches
		{
			get
			{
				return this._Searches;
			}
			set
			{
				this._Searches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Workspaces(Workspace entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Workspaces(Workspace entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tags(Tag entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TaggedItems(TaggedItem entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TaggedItems(TaggedItem entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Notes(Note entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Searches(Search entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Searches(Search entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfiles")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _ResultsLayout;
		
		private System.Nullable<int> _ResultsRows;
		
		private System.Nullable<int> _ResultsPageSize;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnResultsLayoutChanging(string value);
    partial void OnResultsLayoutChanged();
    partial void OnResultsRowsChanging(System.Nullable<int> value);
    partial void OnResultsRowsChanged();
    partial void OnResultsPageSizeChanging(System.Nullable<int> value);
    partial void OnResultsPageSizeChanged();
    #endregion
		
		public UserProfile()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="nvarchar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultsLayout", DbType="NChar(10)")]
		public string ResultsLayout
		{
			get
			{
				return this._ResultsLayout;
			}
			set
			{
				if ((this._ResultsLayout != value))
				{
					this.OnResultsLayoutChanging(value);
					this.SendPropertyChanging();
					this._ResultsLayout = value;
					this.SendPropertyChanged("ResultsLayout");
					this.OnResultsLayoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultsRows", DbType="Int")]
		public System.Nullable<int> ResultsRows
		{
			get
			{
				return this._ResultsRows;
			}
			set
			{
				if ((this._ResultsRows != value))
				{
					this.OnResultsRowsChanging(value);
					this.SendPropertyChanging();
					this._ResultsRows = value;
					this.SendPropertyChanged("ResultsRows");
					this.OnResultsRowsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultsPageSize", DbType="Int")]
		public System.Nullable<int> ResultsPageSize
		{
			get
			{
				return this._ResultsPageSize;
			}
			set
			{
				if ((this._ResultsPageSize != value))
				{
					this.OnResultsPageSizeChanging(value);
					this.SendPropertyChanging();
					this._ResultsPageSize = value;
					this.SendPropertyChanged("ResultsPageSize");
					this.OnResultsPageSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProfile", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		internal User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserProfile = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserProfile = this;
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Searches")]
	public partial class Search : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SearchID;
		
		private System.Guid _ApplicationID;
		
		private string _UserId;
		
		private string _DisplayName;
		
		private string _Term;
		
		private string _IDs;
		
		private int _Rows;
		
		private int _RowStart;
		
		private int _NumFound;
		
		private string _ParentID;
		
		private string _SortFields;
		
		private string _FacetConstraints;
		
		private System.DateTime _SearchDate;
		
		private bool _Deleted;
		
		private bool _Empty;
		
		private bool _Hidden;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSearchIDChanging(System.Guid value);
    partial void OnSearchIDChanged();
    partial void OnApplicationIDChanging(System.Guid value);
    partial void OnApplicationIDChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnTermChanging(string value);
    partial void OnTermChanged();
    partial void OnIDsChanging(string value);
    partial void OnIDsChanged();
    partial void OnRowsChanging(int value);
    partial void OnRowsChanged();
    partial void OnRowStartChanging(int value);
    partial void OnRowStartChanged();
    partial void OnNumFoundChanging(int value);
    partial void OnNumFoundChanged();
    partial void OnParentIDChanging(string value);
    partial void OnParentIDChanged();
    partial void OnSortFieldsChanging(string value);
    partial void OnSortFieldsChanged();
    partial void OnFacetConstraintsChanging(string value);
    partial void OnFacetConstraintsChanged();
    partial void OnSearchDateChanging(System.DateTime value);
    partial void OnSearchDateChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    partial void OnEmptyChanging(bool value);
    partial void OnEmptyChanged();
    partial void OnHiddenChanging(bool value);
    partial void OnHiddenChanged();
    #endregion
		
		public Search()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SearchID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SearchID
		{
			get
			{
				return this._SearchID;
			}
			set
			{
				if ((this._SearchID != value))
				{
					this.OnSearchIDChanging(value);
					this.SendPropertyChanging();
					this._SearchID = value;
					this.SendPropertyChanged("SearchID");
					this.OnSearchIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationID
		{
			get
			{
				return this._ApplicationID;
			}
			set
			{
				if ((this._ApplicationID != value))
				{
					this.OnApplicationIDChanging(value);
					this.SendPropertyChanging();
					this._ApplicationID = value;
					this.SendPropertyChanged("ApplicationID");
					this.OnApplicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="nvarchar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(255)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Term", DbType="NVarChar(255)")]
		public string Term
		{
			get
			{
				return this._Term;
			}
			set
			{
				if ((this._Term != value))
				{
					this.OnTermChanging(value);
					this.SendPropertyChanging();
					this._Term = value;
					this.SendPropertyChanged("Term");
					this.OnTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDs", DbType="NVarChar(MAX)")]
		public string IDs
		{
			get
			{
				return this._IDs;
			}
			set
			{
				if ((this._IDs != value))
				{
					this.OnIDsChanging(value);
					this.SendPropertyChanging();
					this._IDs = value;
					this.SendPropertyChanged("IDs");
					this.OnIDsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rows", DbType="Int NOT NULL")]
		public int Rows
		{
			get
			{
				return this._Rows;
			}
			set
			{
				if ((this._Rows != value))
				{
					this.OnRowsChanging(value);
					this.SendPropertyChanging();
					this._Rows = value;
					this.SendPropertyChanged("Rows");
					this.OnRowsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowStart", DbType="Int NOT NULL")]
		public int RowStart
		{
			get
			{
				return this._RowStart;
			}
			set
			{
				if ((this._RowStart != value))
				{
					this.OnRowStartChanging(value);
					this.SendPropertyChanging();
					this._RowStart = value;
					this.SendPropertyChanged("RowStart");
					this.OnRowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumFound", DbType="Int NOT NULL")]
		public int NumFound
		{
			get
			{
				return this._NumFound;
			}
			set
			{
				if ((this._NumFound != value))
				{
					this.OnNumFoundChanging(value);
					this.SendPropertyChanging();
					this._NumFound = value;
					this.SendPropertyChanged("NumFound");
					this.OnNumFoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentID", DbType="NVarChar(255)")]
		public string ParentID
		{
			get
			{
				return this._ParentID;
			}
			set
			{
				if ((this._ParentID != value))
				{
					this.OnParentIDChanging(value);
					this.SendPropertyChanging();
					this._ParentID = value;
					this.SendPropertyChanged("ParentID");
					this.OnParentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortFields", DbType="NVarChar(MAX)")]
		public string SortFields
		{
			get
			{
				return this._SortFields;
			}
			set
			{
				if ((this._SortFields != value))
				{
					this.OnSortFieldsChanging(value);
					this.SendPropertyChanging();
					this._SortFields = value;
					this.SendPropertyChanged("SortFields");
					this.OnSortFieldsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacetConstraints", DbType="NVarChar(MAX)")]
		public string FacetConstraints
		{
			get
			{
				return this._FacetConstraints;
			}
			set
			{
				if ((this._FacetConstraints != value))
				{
					this.OnFacetConstraintsChanging(value);
					this.SendPropertyChanging();
					this._FacetConstraints = value;
					this.SendPropertyChanged("FacetConstraints");
					this.OnFacetConstraintsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SearchDate", DbType="DateTime NOT NULL")]
		public System.DateTime SearchDate
		{
			get
			{
				return this._SearchDate;
			}
			set
			{
				if ((this._SearchDate != value))
				{
					this.OnSearchDateChanging(value);
					this.SendPropertyChanging();
					this._SearchDate = value;
					this.SendPropertyChanged("SearchDate");
					this.OnSearchDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Empty", DbType="Bit NOT NULL")]
		public bool Empty
		{
			get
			{
				return this._Empty;
			}
			set
			{
				if ((this._Empty != value))
				{
					this.OnEmptyChanging(value);
					this.SendPropertyChanging();
					this._Empty = value;
					this.SendPropertyChanged("Empty");
					this.OnEmptyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hidden", DbType="Bit NOT NULL")]
		public bool Hidden
		{
			get
			{
				return this._Hidden;
			}
			set
			{
				if ((this._Hidden != value))
				{
					this.OnHiddenChanging(value);
					this.SendPropertyChanging();
					this._Hidden = value;
					this.SendPropertyChanged("Hidden");
					this.OnHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Search", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Searches.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Searches.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
